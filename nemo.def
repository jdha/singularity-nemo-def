Bootstrap: library
From: ubuntu:20.04

####
#
# Authors:      Chris Wood, EPCC, University of Edinburgh <c.wood@epcc.ed.ac.uk>; James Harle, National Oceanography Centre <jdha@noc.ac.uk>
# Date:         2019-09-06
# Last updated: 2021-14-06
#
###

%post

    ##
    #
    # Compilation from source necessary where apt-get binaries weren't compiled with necessary dependencies for XIOS and NEMO
    #
    ##

    ##
    # install basic stuff
    ##

    apt install -y locales #locales-all
    locale-gen en_GB en_GB.UTF-8 # en_US en_US.UTF-8

    apt install -y software-properties-common
    add-apt-repository universe
    apt update

    # n.b. 
    #   - libcurl4-openssl-dev also installs libcurl4 (as does curl, if not already installed)
    #   - zlib already installed
    apt install -y python \
                   subversion \
                   wget \
                   git \
                   make \
                   m4 \
                   gcc \
                   gfortran \
                   g++ \
                   liburi-perl \
                   libcurl4-openssl-dev \
                   curl \
                   zlib1g-dev \
                   libibverbs-dev \
                   libpmix-dev \
                   libslurm-dev

    # this decreases the size of the container
    apt clean

    ##
    # make user `nemo` - mpiexec in hdf5 `make check` complains if run as root (although we're not running it at the moment)
    ##

    adduser --disabled-password --gecos "" nemo

    ###
    # softlink gmake to make
    ###

    ln -s /usr/bin/make /usr/bin/gmake

    ##
    # compiling openmpi
    ##

    OPENMPI_DIR=/opt/openmpi
    mkdir -p $OPENMPI_DIR
    cd $OPENMPI_DIR
    wget https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-4.1.1.tar.bz2
    mkdir openmpi
    tar -xvjf openmpi-4.1.1.tar.bz2 -C openmpi --strip-components 1
    rm openmpi-4.1.1.tar.bz2
    
    cd openmpi
    ./configure CC=gcc CXX=g++ FC=gfortran --enable-mpi1-compatibility --prefix=/opt/openmpi-4.1.1/install --with-verbs --with-slurm --with-pmix
    make
    make install
    cd ..
    rm -r openmpi # removes the 303 mb directory

    ##
    # compile HDF5 libraries
    ##

    HDF_DIR=/opt/hdf5
    mkdir -p $HDF_DIR
    cd $HDF_DIR
    wget -O hdf5.tar.bz2 "https://www.hdfgroup.org/package/hdf5-1-12-0-tar-bz2/?wpdmdl=14584&refresh=60be563cf137e1623086652"
    mkdir hdf
    tar xjvf hdf5.tar.bz2 -C hdf --strip-components 1
    rm hdf5.tar.bz2

    H5DIR=/opt/hdf5/install
    cd hdf

    # n.b. --enable-fortran specifically not needed (https://www.unidata.ucar.edu/software/netcdf/docs/getting_and_building_netcdf.html#build_default)
    CC=/opt/openmpi-4.1.1/install/bin/mpicc ./configure --prefix=${H5DIR} --enable-hl --enable-parallel --with-default-api-version=v18
    make
    # maybe we shouldn't bother with make check - it complains about a lot and we're not actually building on a parallel file system
    # so some of the checks are totally irrelevant
    # make check -i RUNPARALLEL='-oversubscribe'
    make install
    cd .. 
    rm -r hdf # removes the 212 mb directory

    ##
    # compile NetCDF libraries
    ##

    NETCDF_DIR=/opt/netcdf
    mkdir -p $NETCDF_DIR
    cd $NETCDF_DIR 

    # C libraries...
    wget -O netcdf.tar.gz https://github.com/Unidata/netcdf-c/archive/v4.8.0.tar.gz
    mkdir netcdf
    tar xzvf netcdf.tar.gz -C netcdf --strip-components 1
    rm netcdf.tar.gz 
    
    cd netcdf
    NCDIR=/opt/netcdf/install
    
    CC=/opt/openmpi-4.1.1/install/bin/mpicc FC=/opt/openmpi-4.1.1/install/bin/mpifort CPPFLAGS="-I${H5DIR}/include" LDFLAGS="-L${H5DIR}/lib" ./configure --disable-shared --prefix=$NCDIR
    make
    # make check fails; maybe we should avoid running it (only 1 response from a question on the netcdf mailing list, saying it is really finicky) 
    # make check
    make install
    cd .. 
    rm -r netcdf # removes the 125 mb directory

    # ...and the fortran libraries
    wget https://github.com/Unidata/netcdf-fortran/archive/v4.5.3.tar.gz
    mkdir netcdf
    tar xzvf v4.5.3.tar.gz -C netcdf --strip-components 1
    rm v4.5.3.tar.gz
    cd netcdf
    NFDIR=/opt/netcdf/install
    
    CC=/opt/openmpi-4.1.1/install/bin/mpicc FC=/opt/openmpi-4.1.1/install/bin/mpifort CPPFLAGS="-I${NCDIR}/include -I${H5DIR}/include" LDFLAGS="-L${NCDIR}/lib -L${H5DIR}/lib" LIBS="-lhdf5 -lhdf5_hl -lcurl" ./configure --prefix=$NFDIR --disable-shared
    make
    make install
    cd ..
    rm -r netcdf # removes the 18 mb directory

    ##
    # Now we can install NEMO
    ##

    ln -s /opt/openmpi-4.1.1/install/bin/mpif90 /usr/bin/mpif90

    WORK_DIR=/nemo >> $SINGULARITY_ENVIRONMENT
    mkdir $WORK_DIR
    cd $WORK_DIR
    chown nemo:nemo -R $WORK_DIR

    PATH=$PATH:/opt/openmpi-4.1.1/install/bin:/opt/hdf5/install/bin
    LD_LIBRARY_PATH=/opt/hdf5/install/lib:$LD_LIBRARY_PATH
    
    # These GIT_SSH_COMMAND options prevent prompts. Since we're root, not the user on the host who will (probably) have the SSH agent, we also need to pass the SSH_AUTH_SOCK environment
    # variable: SINGULARITYENV_SSH_AUTH_SOCK=$SSH_AUTH_SOCK
    GIT_SSH_COMMAND="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no" git clone git@github.com:NOC-MSM/singularity-nemo.git
    
    cd singularity-nemo

    # dev branch
    git checkout gyre_singularity

    cd scripts
    ./nemo_setup_gyre -x /nemo -w /nemo -s /nemo/singularity-nemo

    mkdir /opt/nemo
    mv /nemo/nemo/cfgs/GYRE_PISCES/EXP00/nemo /opt/nemo/

    mkdir /opt/xios
    mv /nemo/nemo/cfgs/GYRE_PISCES/EXP00/xios_server.exe /opt/xios/xios

    # make everything we've built be owned by `nemo` 
    chown -Rv nemo:nemo /opt
    
    # directories + binaries executable, everything read only by g+o...
    chmod -Rv 644 /opt
    find /opt -type d -print0 | xargs -0 chmod -v 511
    find /opt -type f -exec file -i {} + | grep ":[^:]*binary[^:]*$" |  sed 's/^\(.*\):[^:]*$/\1/' | xargs chmod -v 511

%environment
    
    # this is needed - nemo is built dynamically (and openmpi, the other library needed, is dealt with in the wrapper script automagically)
    export LD_LIBRARY_PATH=/opt/hdf5/install/lib:$LD_LIBRARY_PATH

%runscript
    #!/bin/bash

    # This runscript will take 2 arguments: program to run (NEMO or XIOS), and an output directory. By default, the output directory will be the job id (passed using $SLURM_JOB_ID).    

    # create directory so we can symlink to /nemo/nemo/cfgs/GYRE_PISCES/EXP00/
    # we should allow an output directory, and manage this in a cleanup section of the batch script, before deleting the symlinked directory there

    # Improvements:
    #   - update when we use a generic cfg directory
    #   - is using $SLURM_JOB_ID directly here best, or should we pass it as the 2nd argument to the script and use a more generic variable here?
    #   - we could make the arguments a bit more intelligent; e.g.
    #       - if only 1 argument, check whether it's nemo or xios; if neither then it's an output directory (and run nemo in attached mode)
    #       - does the output directory need to be set for both 

    if ! [[ $1 == "nemo" || $1 == "xios" ]]    
    then
      echo "The program argument should be either 'nemo' or 'xios'"
      exit 1
    fi

    results_dir=$2

    if [[ -z $2 ]]
    then
      results_dir=$SLURM_JOB_ID
    fi

    if [[ -z $results_dir ]]
    then
        echo "Please supply an output directory"
        exit 1
    fi

    if [[ ! -d $results_dir ]]
    then
        mkdir $results_dir
    fi 

    cd $results_dir

    for file in /nemo/nemo/cfgs/GYRE_PISCES/EXP00/*
    do
    
        # check if the file is already symlinked to prevent lots of spurious error messages
        # but, we have to create this linkfile variable: some of the nemo files are themselves symlinks, so the 
        # if statement will fail to create a symlink for those if we just use the base path
        
        linkfile=`basename $file`

        if ! [[ -L $linkfile ]]
        then
            ln -s $file $linkfile
        fi
    done
    

    if [[ $1 == 'nemo' ]]
    then
        /opt/nemo/nemo
    else
        /opt/xios/xios
    fi

    # do some checking here to make sure the job has finished (to do), and then delete the symlinks:

    #find . -type l | while read linkname
    #do
    #    rm $linkname
    #done

%labels
    Author c.wood@epcc.ed.ac.uk
    Version v0.0.1

%help
    The definition file used to create this container builds NEMO, XIOS, and the following dependencies from source:
        - OpenMPI (4.0.1)
        - HDF5 (1.10.5)
        - NetCDF C (4.7.1) and Fortran (4.5.2) libraries 

    This container includes XIOS v2.5 and a GYRE_PISCES build of NEMO

    To build the container, run

        singularity build nemo.sif nemo.def

    To build, it requires you to have read access to the NOC-MSM `singularity-nemo` repository. If you have SSH access set up, you can pass the SSH_AUTH_SOCK environment variable to 
    prevent being prompted for your username and password, by building as

        sudo SINGULARITYENV_SSH_AUTH_SOCK=$SSH_AUTH_SOCK singularity build nemo.sif nemo.def

    The resulting container has one mandatory and on optional arugments: the program to run with that instance (nemo or xios), and an output directory name. If submitted as part of a slurm 
    sunmission, the output directory name will, by default, be the job id

    # more info about running mpi with examples, e.g.

    # mpirun -npernode 1 -n 1 --mca orte_base_help_aggregate 0 --mca btl_vader_single_copy_mechanim none --mca btl ^sm --mca btl_openib_allow_ib true --bind-to core singularity -d exec -B /etc/libibverbs.d --env LD_LIBRARY_PATH=/opt/hdf5/install/lib:$LD_LIBRARY_PATH --pwd $HOME/containers/nemo/cfgs/GYRE_PISCES/EXP00 nemo.sif /opt/nemo/nemo : -N 1 -n 1 singularity exec --pwd $HOME/containers/nemo/cfgs/GYRE_PISCES/EXP00 nemo.sif /nemo/nemo/cfgs/GYRE_PISCES/EXP00/xios_server.exe 
